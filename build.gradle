//file:noinspection GroovyAssignabilityCheck
// TODO
//  setup Mixin for vanilla Piglin barter system based on the Piglin Merchant's barter system
//file:noinspection GrUnresolvedAccess
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "todepiglins.refmap.json"
    config "todepiglins.mixins.json"
}

version = "${project.minecraft_version}-${project.mod_version}"
group = "${project.mod_domain}"
archivesBaseName = 'todepiglins'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todepiglins'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'geckolib.disable_examples', 'true'
            mods {
                todepiglins {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todepiglins'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'geckolib.disable_examples', 'true'
            mods {
                todepiglins {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todepiglins'
            property 'geckolib.disable_examples', 'true'
            mods {
                todepiglins {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'geckolib.disable_examples', 'true'
            args '--mod', 'todepiglins', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                todepiglins {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
    }
    maven {
        name = "SmartBrainLib (SBL) Maven Repo"
        url = "https://repo.repsy.io/mvn/tslat/smartbrainlib"
    }
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.8'
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-1.19.2:1.8.1")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19:3.1.40')
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modid,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.modid,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "todepiglins.mixins.json"
        ])
    }
}

tasks.register('updateJson') {
    file('update.json').withWriter { w ->
        file('update_template.json').eachLine { line ->
            w << line.replaceAll("version", project.version) + System.getProperty("line.separator")
        }
        w.close()
    }
}

tasks.register('deobfJar', Jar) { // Generate deobfuscated
    from sourceSets.main.output
    archiveClassifier = 'deobf'
}

tasks.register('sourceJar', Jar) { // Generate sources
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "${project.mod_domain}"
            artifactId = "${project.modid}"
            version = "${project.jar.archiveVersion}"

            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}